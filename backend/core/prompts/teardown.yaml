teardown_prompt: |
  You are tasked with performing a comprehensive teardown analysis of a GitHub repository. Your goal is to create a detailed markdown document that explains the repository's structure, architecture, and key components at a first principles level.

  ## Context-Aware Analysis
  
  You have been provided with key repository metadata above including:
  - **Major languages** (>20% representation) - Focus your analysis on these primary languages
  - **Repository stats** (stars, forks, issues) - Use these to gauge maturity and community adoption
  - **Recent activity** - Check if recent commits align with or reveal current development priorities
  - **Topics/tags** - Use these as hints about the domain and problem space
  - **License** - Consider this when discussing usage, contribution, and deployment patterns
  
  Use this context to guide your exploration and tailor your analysis. For example:
  - If the repo has high stars/forks, emphasize production readiness and best practices
  - If it's a fork, note differences or improvements over the parent
  - Focus your code analysis on the major languages identified
  - Reference recent commits when they reveal architectural decisions or active areas of development

  ## Your Analysis Should Include:

  ### 1. Repository Overview
  - Expand on the provided description with insights from the codebase
  - Main purpose and use cases (validate against actual implementation)
  - Key technologies and frameworks used (verify and expand on the language breakdown provided)
  - Target audience and problem it solves (explain for both technical and non-technical readers)

  ### 2. Main Data Structures
  - Identify the central data structures used throughout the repository
  - Explain their purpose and relationships in plain language
  - Show how they connect and interact with each other
  - Include relevant code snippets for important structures
  - Provide analogies or real-world comparisons to help lay people understand

  ### 3. Core Functions
  - Identify the main functions that are central to the repository's functionality
  - Explain their purpose and how they work together
  - Map the flow of execution between key functions
  - Include relevant code snippets for important functions
  - Describe the business logic and user-facing impact of these functions

  ### 4. Key Classes
  - Identify the main classes that are central to the repository. 
  - Explain their responsibilities and relationships
  - Show inheritance hierarchies and composition patterns
  - Include relevant code snippets for important classes
  - Explain how these classes translate to real-world concepts or user features

    To identify the most important classes study the imports. The classes that are referenced the most in the imports and otherwise are the most important.
    This is because they are likely the building blocks that other more complex classes are built on top of.

  ### 5. Module Architecture
  - Identify the main modules and their purposes
  - Explain how modules interact and depend on each other
  - Show the overall modular structure and organization
  - Describe how the modular design benefits maintainability and scalability

  ### 6. User Journey & Business Logic
  - Explain how a typical user would interact with this system
  - Map technical components to user-facing features
  - Describe the business value and impact of key functionality
  - Include concrete examples of how the system would be used

  ### 7. Technical Deep Dive
  - Discuss architectural patterns and design decisions
  - Explain performance considerations and optimizations
  - Cover security measures and data handling practices
  - Analyze code quality, testing strategies, and maintainability
  - Consider the maturity level based on repository stats (stars, forks, age)
  - Discuss licensing implications and contribution guidelines (reference the license provided)
  - Evaluate recent development activity and maintenance status (from recent commits)

  ### 8. Visual Diagrams
  Create the following Mermaid diagrams to visualize the architecture:

  #### 8.1 Data Flow Diagram
  ```mermaid
  flowchart TD
      %% Show how data flows through the system
  ```

  #### 8.2 Class Diagram
  ```mermaid
  classDiagram
      %% Show class relationships, inheritance, and composition
  ```

  #### 8.3 Sequence Diagram
  ```mermaid
  sequenceDiagram
      %% Show the sequence of interactions for a key use case
  ```

  #### 8.4 Module Dependency Diagram
  ```mermaid
  graph TD
      %% Show how modules depend on each other
  ```

  ## Instructions:
  1. Review the repository context provided above - note the major languages, topics, and recent activity
  2. Start by exploring the repository structure using Read and Bash tools
  3. Focus on files written in the major languages identified (>20% representation)
  4. Identify the main entry points and configuration files
  5. Analyze the core modules, classes, and functions in the primary languages
  6. Validate or expand on insights from the repository metadata (description, topics, recent commits)
  7. Create the comprehensive markdown analysis incorporating both the provided context and your findings
  8. Write the analysis to a file named `analysis.md` in the current directory

  ## Output Requirements:
  - **Write at least a 2000 word analysis** - be detailed and comprehensive
  - **Dual audience approach**: The document should aid both lay people and developers to understand the repository
  - Ensure both technical and non-technical readers gain valuable insights from your analysis
  - Write everything in clear, well-structured markdown
  - Include code snippets where relevant (but not excessive amounts)
  - Use proper markdown formatting with headers, lists, and code blocks
  - Ensure all Mermaid diagrams are valid and properly formatted
  - Focus on clarity and understanding rather than exhaustive detail
  - Balance technical depth with accessible explanations
  - Use analogies, examples, and plain language explanations alongside technical details
  - Structure the content so lay readers can understand the big picture while developers can dive into technical specifics
  - The output should help someone understand the repository quickly and thoroughly, regardless of their technical background

  ## Repository to Analyze:
  The repository has been cloned to the current working directory. The metadata context has been provided above to guide your analysis. Begin your exploration now, using the context to focus on the most relevant aspects of the codebase.

teardown_prompt_test: |
    This is a test analysis. Your job is to create an `analysis.md` file in the current directory.
    Write a brief overview of what you know about the repository into the `analysis.md` file.
    No looking at the code. Just write about what you know about the repository. 
    If you dont know anything, then look at the README.md file. 
    Do not look at any file beyond the README.md file.
    Only look at the README.md if you dont know anything about the repository.
    It should be done in a single shot.